name: build uxplay for windows
on:
  workflow_dispatch:
    inputs:
      bonjour_sdk_url:
        description: "Direct URL to BonjourSDKSetup.exe v3.0. Download from https://developer.apple.com/bonjour and upload it somewhere"
        default: ""
        required: true
        type: string

jobs:
  build:
    name: build uxplay
    runs-on: windows-latest    
    permissions:
      contents: write
    
    steps:
      - name: clone the repo
        uses: actions/checkout@v4

      - name: download & install 7zip
        run: | 
          Invoke-WebRequest -Uri https://7-zip.org/a/7z2301-x64.exe -OutFile 7zip.exe
          .\7zip.exe /S
          
      - name: download & install Inno Setup
        run: |
          Invoke-WebRequest https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          start (Join-Path -Path $(Get-Location) -ChildPath "is.exe") /VERYSILENT

      # downloads BonjourSDKSetup.exe from the URL provided, extracts it into the multiple .msi(s),
      #    installs the runtime and then the SDK (both neeeded, in this order)
      - name: download & install Bonjour
        env:
          BONJOUR_URL: ${{ inputs.bonjour_sdk_url }}
        run: |
          Invoke-WebRequest -Uri $env:BONJOUR_URL -OutFile bonjoursdksetup.exe
          .'C:\Program Files\7-Zip\7z.exe' -tcab x bonjoursdksetup.exe
          
          $bonjour64args = "/i $(Join-Path -Path $(Get-Location) -ChildPath "Bonjour64.msi") /qn /L*v bonjour64.log"
          Start-Process msiexec -ArgumentList $bonjour64args -NoNewWindow -Wait
          
          $bonjourSDK64args = "/i $(Join-Path -Path $(Get-Location) -ChildPath "BonjourSDK64.msi") /qn /L*v bonjoursdk64.log"
          Start-Process msiexec -ArgumentList $bonjourSDK64args -NoNewWindow -Wait

      - name: download & install msys2 + build dependencies
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            zip
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-libplist
            mingw-w64-x86_64-json-glib
            mingw-w64-x86_64-gstreamer
            mingw-w64-x86_64-gst-plugins-base
            mingw-w64-x86_64-gst-libav
            mingw-w64-x86_64-gst-plugins-good
            mingw-w64-x86_64-gst-plugins-bad

      - name: compiling uxplay (finally)
        shell: msys2 {0}
        run: |
          git clone https://github.com/FDH2/UxPlay && cd UxPlay
          mkdir build && cd build
          cmake ..
          ninja
          
          mkdir artifact && cd artifact
          mkdir lib
          cp -r /mingw64/lib/gstreamer-1.0 lib/gstreamer-1.0
          cp -r /mingw64/bin bin
          cp ../uxplay.exe bin
          echo ".\bin\uxplay.exe" > uxplay-windows.bat
          
      - name: install pyinstaller and dependencies
        run: |
          python -m venv ./venv
          .\venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install pyinstaller pystray

          pyinstaller --noconsole --onedir --clean --name uxplay-windows --icon=icon.ico tray.py

          cp -r D:\a\uxplay-windows\uxplay-windows\UxPlay\build\artifact\* D:\a\uxplay-windows\uxplay-windows\dist\uxplay-windows\_internal
          
      - name: compile the installer with inno setup
        run: .$(Join-Path -Path ${env:PROGRAMFILES(X86)} -ChildPath 'Inno Setup 6\\ISCC.exe') $(Join-Path -Path $(Get-Location) -ChildPath "script.iss")

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        
      - name: uploading artifact
        uses: actions/upload-artifact@v4
        with:
          name: uxplay-windows
          path: Output\uxplay-windows.exe


; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "uxplay-windows"
#define MyAppVersion "1.72"
#define MyAppPublisher "leapbtw"
#define MyAppURL "https://github.com/leapbtw/uxplay-windows"
#define MyAppExeName "uxplay-windows.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{02621F03-7F92-4E33-AA17-017F79B31DCF}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=uxplay-windows
SetupIconFile=D:\a\uxplay-windows\uxplay-windows\icon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
UninstallDisplayIcon={app}\{#MyAppExeName}
; Ensure application is closed before uninstall
CloseApplications=yes
RestartApplications=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\a\uxplay-windows\uxplay-windows\dist\uxplay-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\a\uxplay-windows\uxplay-windows\dist\uxplay-windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; Temporary files for Bonjour installation if needed
Source: "{tmp}\BonjourPSSetup.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall external; ExternalSize: 2000000; Check: not IsBonjourInstalled

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
; Install Bonjour if not already installed
Filename: "{tmp}\BonjourPSSetup.exe"; Parameters: "/extract"; Flags: waituntilterminated runhidden; Check: not IsBonjourInstalled
Filename: "cmd.exe"; Parameters: "/c expand ""{tmp}\BonjourPS.msi"" -F:* ""{tmp}"""; Flags: waituntilterminated runhidden; Check: not IsBonjourInstalled
Filename: "msiexec.exe"; Parameters: "/i ""{tmp}\Bonjour64.msi"" /qn"; Flags: waituntilterminated; StatusMsg: "Installing Bonjour..."; Check: not IsBonjourInstalled

; Launch the application after installation
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall skipifsilent

[UninstallRun]
; This ensures any running instance is closed before uninstallation
Filename: "{cmd}"; Parameters: "/c taskkill /f /im {#MyAppExeName} 2>nul"; Flags: runhidden

[Code]
// Function to check if Bonjour is installed by checking registry key
function IsBonjourInstalled: Boolean;
begin
  Result := RegKeyExists(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\Bonjour Service');
  if Result then
    Log('Bonjour Service is already installed.')
  else
    Log('Bonjour Service is not installed. Will download and install it.');
end;

// Function to download Bonjour installer if not installed
function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  DownloadPage: TDownloadWizardPage;
begin
  Result := '';
  
  // If Bonjour is not installed, download the installer
  if not IsBonjourInstalled then
  begin
    DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), nil);
    
    DownloadPage.Add('https://download.info.apple.com/Mac_OS_X/061-8098.20100603.gthyu/BonjourPSSetup.exe', 'BonjourPSSetup.exe', '');
    DownloadPage.Show;
    try
      try
        DownloadPage.Download;
        Result := '';
      except
        Result := 'Error downloading Bonjour. ' + GetExceptionMessage;
      end;
    finally
      DownloadPage.Hide;
    end;
  end;
end;

// Show a message during installation indicating Bonjour installation status
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then
  begin
    if not IsBonjourInstalled then
      Log('Will install Bonjour as part of the setup.')
    else
      Log('Skipping Bonjour installation as it is already installed.');
  end;
end;

// Function to handle application closing before uninstall
function InitializeUninstall(): Boolean;
var
  ErrorCode: Integer;
  ProcessRunning: Boolean;
  RetryCount: Integer;
  UninstallBonjour: Boolean;
begin
  Result := True;
  
  // Check if our application is running and try to close it
  ProcessRunning := True;
  RetryCount := 0;
  
  while ProcessRunning and (RetryCount < 5) do
  begin
    // Try to close the application gracefully first
    if Exec('taskkill.exe', '/im {#MyAppExeName}', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
    begin
      // Wait a bit for the process to close
      Sleep(1000);
      
      // Check if it's still running
      ProcessRunning := not Exec('cmd.exe', '/c tasklist | find "{#MyAppExeName}" > nul || exit 0', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode) 
                         or (ErrorCode <> 0);
      
      if ProcessRunning then
      begin
        // If still running, try force kill after a few retries
        if RetryCount >= 2 then
        begin
          Exec('taskkill.exe', '/f /im {#MyAppExeName}', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
          Sleep(1000);
        end;
      end;
    end;
    
    RetryCount := RetryCount + 1;
  end;
  
  // Ask if user wants to uninstall Bonjour as well
  if IsBonjourInstalled then
  begin
    UninstallBonjour := MsgBox('Would you like to uninstall Bonjour as well?' + #13#10 + 
                              '(Note: Only uninstall if no other applications need it)',
                              mbConfirmation, MB_YESNO) = IDYES;
    
    if UninstallBonjour then
    begin
      // Uninstall Bonjour using msiexec
      if Exec('msiexec.exe', '/x {00000000-0000-0000-0000-000000000000} /qn', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
        Log('Bonjour uninstall command executed')
      else
        Log('Failed to execute Bonjour uninstall command');
    end;
  end;
  
  Result := True;
end;

// Make sure the app directory is completely removed during uninstall
procedure DeinitializeUninstall();
var
  AppDir: String;
begin
  AppDir := ExpandConstant('{app}');
  if DirExists(AppDir) then
  begin
    DelTree(AppDir, True, True, True);
  end;
end;
